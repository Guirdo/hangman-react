{"version":3,"sources":["hooks/useForm.js","reducer/Context.js","reducer/types.js","components/menu/MenuScreen.jsx","drawing/draw.js","components/play/DeathScreen.jsx","hooks/useCanvas.js","components/play/LetterScreen.jsx","components/play/WrongLetters.jsx","components/play/InputScreen.jsx","components/play/PlayScreen.jsx","components/ui/Navbar.jsx","routers/AppRouter.jsx","reducer/reducer.js","HangmanApp.jsx","index.js"],"names":["useForm","initialState","useState","values","setValues","reset","handleInputChange","target","name","value","Context","createContext","types","MenuScreen","history","useContext","word","game","dispatch","location","useLocation","queryString","parse","search","q","wordSet","formValues","handlInputChange","Row","className","Form","onSubmit","e","preventDefault","type","payload","count","replace","Group","Label","Control","autoComplete","onChange","Button","draw","ctx","drawLine","x1","y1","x2","y2","beginPath","moveTo","lineTo","stroke","strokeStyle","lineWidth","arc","Math","PI","DeathScreen","canvasRef","useRef","useEffect","context","current","getContext","useCanvas","Col","width","height","ref","LetterScreen","letter","sm","toUpperCase","WrongLetters","letters","Alert","variant","InputScreen","useHistory","toLowerCase","split","rightLetters","setRightLetters","wrongLetters","setWrongLetters","disable","setDisable","hasWon","setHasWon","handleRestart","length","alert","toString","map","le","i","find","rl","wl","disabled","onClick","PlayScreen","Navbar","to","AppRouter","exact","path","component","reducer","state","action","init","JSON","localStorage","getItem","HangmanApp","useReducer","setItem","stringify","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ac6bb6df.chunk.js","sourcesContent":["import { useState } from \"react\"\r\n\r\nexport const useForm = (initialState = {}) => {\r\n    \r\n    const [values, setValues] = useState(initialState);\r\n\r\n    const reset = () => {\r\n        setValues(initialState)\r\n    }\r\n\r\n    const handleInputChange = ({target}) => {\r\n        setValues({\r\n            ...values,\r\n            [ target.name ]: target.value,\r\n        })\r\n    }\r\n\r\n    return [values,handleInputChange,reset];\r\n}","import { createContext } from \"react\";\r\n\r\nexport const Context = createContext()","export const types = {\r\n    set_word: 'set_word',\r\n    count_error: 'count_error'\r\n}","import React, { useContext } from 'react'\r\nimport queryString from 'query-string'\r\nimport { Button, Form, Row } from 'react-bootstrap'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { useForm } from '../../hooks/useForm'\r\nimport { Context } from '../../reducer/Context'\r\nimport { types } from '../../reducer/types'\r\n\r\nexport const MenuScreen = ({ history }) => {\r\n\r\n    const { game: { word }, dispatch } = useContext(Context);\r\n\r\n    const location = useLocation();\r\n    const { q: query = word } = queryString.parse(location.search);\r\n\r\n    const [formValues, handlInputChange] = useForm({\r\n        wordSet: query\r\n    });\r\n\r\n    const { wordSet } = formValues;\r\n\r\n    const handleStart = (e) => {\r\n        e.preventDefault();\r\n\r\n        dispatch({\r\n            type: types.set_word,\r\n            payload: {\r\n                word: wordSet,\r\n                count: 0\r\n            }\r\n        })\r\n\r\n        history.replace('play');\r\n    }\r\n\r\n    return (\r\n        <Row className=\"justify-content-center animate__animated animate__backInUp\">\r\n            <div className=\"col-6 bg-success p-3\">\r\n                <h1 className=\"text-white\">Menu</h1>\r\n\r\n                <Form onSubmit={handleStart}>\r\n                    <Form.Group\r\n                        className=\"mt-3\"\r\n                    >\r\n                        <Form.Label\r\n                            className=\"text-white\"\r\n                        >\r\n                            Enter a word\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            name=\"wordSet\"\r\n                            value={wordSet}\r\n                            autoComplete=\"off\"\r\n                            onChange={handlInputChange}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Button\r\n                        className=\"mt-3\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Star game\r\n                    </Button>\r\n                </Form>\r\n            </div>\r\n        </Row>\r\n    )\r\n}\r\n","export const draw = (ctx, count) => {\r\n    const drawHead = () => {\r\n        ctx.strokeStyle = '#000000';\r\n        ctx.beginPath();\r\n        ctx.arc(350, 120, 40, 0, 2 * Math.PI);\r\n        ctx.stroke();\r\n    }\r\n\r\n    const drawBody = () => {\r\n        drawLine(350, 160, 350, 300);\r\n    }\r\n\r\n    const drawLeftLeg = () => {\r\n        drawLine(350, 300, 300, 370);\r\n    }\r\n\r\n    const drawRightLeg = () => {\r\n        drawLine(350, 300, 400, 370);\r\n    }\r\n\r\n    const drawLeftArm = () => {\r\n        drawLine(350, 230, 400, 200);\r\n    }\r\n\r\n    const drawRightArm = () => {\r\n        drawLine(350, 230, 300, 200);\r\n    }\r\n\r\n    const drawLine = (x1, y1, x2, y2) => {\r\n        ctx.beginPath();\r\n        ctx.moveTo(x1, y1);\r\n        ctx.lineTo(x2, y2);\r\n        ctx.stroke();\r\n    }\r\n\r\n    const drawGallow = () => {\r\n        ctx.strokeStyle = '#000000';\r\n        ctx.lineWidth = 8;\r\n\r\n        drawLine(20, 400, 200, 400);\r\n        drawLine(100, 400, 100, 50);\r\n        drawLine(100, 50, 350, 50);\r\n    }\r\n\r\n    const drawRope = () => {\r\n        ctx.strokeStyle = '#FFC433';\r\n        drawLine(350, 50, 350, 80);\r\n    }\r\n\r\n    switch (count) {\r\n        case 0:\r\n            drawGallow()\r\n            break;\r\n        case 1:\r\n            drawRope();\r\n            break;\r\n        case 2:\r\n            drawHead();\r\n            break;\r\n        case 3:\r\n            drawBody();\r\n            break;\r\n        case 4:\r\n            drawLeftLeg();\r\n            break;\r\n        case 5:\r\n            drawRightArm();\r\n            break;\r\n        case 6:\r\n            drawLeftArm();\r\n            break;\r\n        case 7:\r\n            drawRightLeg();\r\n            break;\r\n        default:\r\n            return;\r\n    }\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { Col } from 'react-bootstrap';\r\nimport { draw } from '../../drawing/draw';\r\nimport { useCanvas } from '../../hooks/useCanvas'\r\nimport { Context } from '../../reducer/Context';\r\n\r\nexport const DeathScreen = () => {\r\n    const { game: { count } } = useContext(Context)\r\n\r\n    const canvasRef = useCanvas(draw, count);\r\n\r\n    return (\r\n        <Col className=\"p-0\">\r\n            <canvas\r\n                width=\"600\"\r\n                height=\"450\"\r\n                ref={canvasRef}\r\n            />\r\n        </Col>\r\n    )\r\n}\r\n","import { useRef, useEffect } from 'react'\r\n\r\nexport const useCanvas = (draw,count) => {\r\n  \r\n  const canvasRef = useRef(null)\r\n  \r\n  useEffect(() => {\r\n    \r\n    const canvas = canvasRef.current\r\n    const context = canvas.getContext('2d')\r\n    \r\n    draw(context,count)\r\n    \r\n  }, [draw,count])\r\n  \r\n  return canvasRef\r\n}\r\n","import { Col } from 'react-bootstrap'\r\n\r\nexport const LetterScreen = ({ letter }) => {\r\n    return (\r\n        <Col \r\n            sm={1}\r\n            className=\"animate__animated animate__bounce\"\r\n        >\r\n            <Col>\r\n                <p className={`${letter === letter.toUpperCase() ? 'text-dark' : 'text-white' } text-center letter-bold`}>\r\n                    {\r\n                        letter === letter.toUpperCase() ? letter : '__'\r\n                    }\r\n                </p>\r\n            </Col>\r\n            <Col className=\"text-center letter-bold\">__</Col>\r\n        </Col>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Alert } from 'react-bootstrap'\r\n\r\nexport const WrongLetters = ({letters}) => {\r\n    return (\r\n        <Alert\r\n            className=\"my-5 animate__animated animate__bounce text-center\"\r\n            variant={'danger'}\r\n        >\r\n            {letters}\r\n        </Alert>\r\n    )\r\n}\r\n","import { useContext, useState, useEffect } from \"react\";\r\nimport { Button, Col, Form, Row } from \"react-bootstrap\"\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useForm } from \"../../hooks/useForm\"\r\nimport { Context } from '../../reducer/Context'\r\nimport { types } from \"../../reducer/types\";\r\nimport { LetterScreen } from \"./LetterScreen\";\r\nimport { WrongLetters } from \"./WrongLetters\";\r\n\r\nexport const InputScreen = () => {\r\n\r\n    const history = useHistory();\r\n\r\n    const { game: { word }, dispatch } = useContext(Context)\r\n\r\n    const [rightLetters, setRightLetters] = useState([...word.toLowerCase().split('')])\r\n    const [wrongLetters, setWrongLetters] = useState([])\r\n    const [disable, setDisable] = useState(false)\r\n    const [hasWon, setHasWon] = useState(false)\r\n\r\n    const [formValues, handleInputChange, reset] = useForm({\r\n        letter: ''\r\n    });\r\n\r\n    const { letter } = formValues;\r\n\r\n    const handleConfirm = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (rightLetters.find(e => e === letter.toLowerCase())) {\r\n            setRightLetters(rl => rl.map(\r\n                le => le === letter ? letter.toUpperCase() : le\r\n            ))\r\n        } else {\r\n            setWrongLetters(wl => [...wl, letter])\r\n\r\n            dispatch({\r\n                type: types.count_error,\r\n                payload: 1\r\n            })\r\n        }\r\n\r\n        reset()\r\n    }\r\n\r\n    const handleRestart = () => {\r\n        history.replace('/')\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (wrongLetters.length === 7) {\r\n            alert('You lose!')\r\n            setDisable(true)\r\n        }\r\n\r\n        if (rightLetters.toString() === rightLetters.toString().toUpperCase()) {\r\n            alert('You won!')\r\n            setDisable(true)\r\n            setHasWon(true)\r\n        }\r\n    }, [rightLetters, wrongLetters])\r\n\r\n    return (\r\n        <Col className=\"p-3\">\r\n\r\n            <Row className=\"justify-content-center my-4\">\r\n                {\r\n                    rightLetters.map((le, i) => (\r\n                        <LetterScreen\r\n                            key={`${le}-${i}`}\r\n                            letter={le}\r\n                        />\r\n                    ))\r\n                }\r\n            </Row>\r\n\r\n            <Form onSubmit={handleConfirm}>\r\n                <Form.Group>\r\n                    <Form.Label>\r\n                        Enter a letter\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        name=\"letter\"\r\n                        value={letter}\r\n                        onChange={handleInputChange}\r\n                        autoComplete=\"off\"\r\n                        disabled={disable}\r\n                    />\r\n\r\n                    <Button\r\n                        className=\"mt-3\"\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={disable}\r\n                    >\r\n                        Confirm\r\n                    </Button>\r\n                </Form.Group>\r\n            </Form>\r\n\r\n            <WrongLetters\r\n                letters={wrongLetters}\r\n            />\r\n\r\n            <Row className=\"justify-content-center\">\r\n                {\r\n                    wrongLetters.length === 7 &&\r\n                    <Button\r\n                        variant={'warning'}\r\n                        onClick={handleRestart}\r\n                        className=\"col-7 animate__animated animate__rubberBand\"\r\n                    >\r\n                        Sorry, try again!\r\n                    </Button>\r\n                }\r\n                {\r\n                    hasWon &&\r\n                    <Button\r\n                        variant='success'\r\n                        onClick={handleRestart}\r\n                        className=\"col-7 animate__animated animate__rubberBand\"\r\n                    >\r\n                        Congratulations! Keep it up!\r\n                    </Button>\r\n                }\r\n            </Row>\r\n        </Col>\r\n    )\r\n}\r\n","import { Row } from 'react-bootstrap';\r\nimport { DeathScreen } from './DeathScreen'\r\nimport { InputScreen } from './InputScreen'\r\n\r\nexport const PlayScreen = () => {\r\n\r\n    return (\r\n        <div className=\"container animate__animated animate__bounceInUp\">\r\n            <h1 className=\"text-center\">The hangman</h1>\r\n\r\n            <Row className=\"justify-content-between\">\r\n                <DeathScreen />\r\n\r\n                <InputScreen/>\r\n            </Row>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import { Link } from 'react-router-dom'\r\n\r\nexport const Navbar = () => {\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\r\n\r\n            <Link\r\n                className=\"navbar-brand mx-3\"\r\n                to=\"/\"\r\n            >\r\n                The hangman, give it a hang\r\n            </Link>\r\n\r\n            <div className=\"navbar-collapse\">\r\n                <div className=\"navbar-nav\">\r\n\r\n                   \r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"navbar-collapse collapse w-100 order-3 dual-collapse2\">\r\n                <ul className=\"navbar-nav ml-auto\">\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import { Row } from \"react-bootstrap\";\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect\r\n} from \"react-router-dom\";\r\nimport { MenuScreen } from \"../components/menu/MenuScreen\";\r\nimport { PlayScreen } from \"../components/play/PlayScreen\";\r\nimport { Navbar } from \"../components/ui/Navbar\"\r\n\r\nexport const AppRouter = () => {\r\n    return (\r\n        <Router>\r\n            <Navbar />\r\n\r\n            <Row className=\"justify-content-center my-3 mx-0\">\r\n                <div>\r\n                    <Switch>\r\n                        <Route\r\n                            exact\r\n                            path=\"/\"\r\n                            component={MenuScreen}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path=\"/play\"\r\n                            component={PlayScreen}\r\n                        />\r\n\r\n                        <Redirect to=\"/\" />\r\n                    </Switch>\r\n                </div>\r\n            </Row>\r\n        </Router>\r\n    )\r\n}","import { types } from \"./types\"\r\n\r\nexport const reducer = (state = {},action) => {\r\n\r\n    switch(action.type){\r\n        case types.set_word:\r\n            return {\r\n                ...action.payload,\r\n            }\r\n        \r\n        case types.count_error:\r\n            return {\r\n                ...state,\r\n                count: state.count +1\r\n            }\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","import { AppRouter } from \"./routers/AppRouter\"\r\nimport { Context } from './reducer/Context'\r\nimport { useEffect, useReducer } from \"react\"\r\nimport { reducer } from \"./reducer/reducer\"\r\n\r\nconst init = () => {\r\n    return JSON.parse(localStorage.getItem('game')) \r\n            || {\r\n                word:'Taco',\r\n                count: 0\r\n            }\r\n}\r\n\r\nexport const HangmanApp = () => {\r\n\r\n    const [ game,dispatch ] = useReducer(reducer,{},init);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('game',JSON.stringify(game))\r\n    }, [game])\r\n\r\n    return(\r\n        <Context.Provider value={{ game,dispatch }}> \r\n            <AppRouter />\r\n        </Context.Provider>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"animate.css\"\nimport './index.css'\nimport { HangmanApp } from './HangmanApp';\n\n\nReactDOM.render(\n  <HangmanApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}