{"version":3,"sources":["hooks/useForm.js","reducer/Context.js","reducer/types.js","components/menu/MenuScreen.jsx","drawing/draw.js","components/play/DeathScreen.jsx","hooks/useCanvas.js","components/play/LetterForm.jsx","components/play/LetterScreen.jsx","components/play/ResetButton.jsx","components/play/WrongLetters.jsx","components/play/InputScreen.jsx","components/play/PlayScreen.jsx","components/ui/Navbar.jsx","routers/AppRouter.jsx","reducer/reducer.js","HangmanApp.jsx","index.js"],"names":["useForm","initialState","useState","values","setValues","reset","handleInputChange","target","name","value","Context","createContext","types","MenuScreen","history","useContext","word","game","dispatch","wordSet","formValues","handlInputChange","Row","className","Form","onSubmit","e","preventDefault","type","payload","rightLetters","toLowerCase","split","replace","Group","Label","Control","autoComplete","onChange","Button","draw","ctx","count","drawLine","x1","y1","x2","y2","beginPath","moveTo","lineTo","stroke","strokeStyle","lineWidth","arc","Math","PI","DeathScreen","wrongLetters","canvasRef","useRef","useEffect","context","current","getContext","useCanvas","length","Col","width","height","ref","LetterForm","letter","find","map","le","toUpperCase","variant","LetterScreen","sm","ResetButton","hasWon","useHistory","handleRestart","onClick","WrongLetters","Alert","InputScreen","hasFinished","setHasFinished","setHasWon","rl","filter","match","wl","alert","i","PlayScreen","Navbar","to","AppRouter","exact","path","component","reducer","state","action","init","HangmanApp","useReducer","localStorage","setItem","JSON","stringify","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1fed2a5.chunk.js","sourcesContent":["import { useState } from \"react\"\r\n\r\nexport const useForm = (initialState = {}) => {\r\n    \r\n    const [values, setValues] = useState(initialState);\r\n\r\n    const reset = () => {\r\n        setValues(initialState)\r\n    }\r\n\r\n    const handleInputChange = ({target}) => {\r\n        setValues({\r\n            ...values,\r\n            [ target.name ]: target.value,\r\n        })\r\n    }\r\n\r\n    return [values,handleInputChange,reset];\r\n}","import { createContext } from \"react\";\r\n\r\nexport const Context = createContext()","export const types = {\r\n    set_word: 'set_word',\r\n    count_error: 'count_error',\r\n\r\n    add_rightletter: 'add_rightletter',\r\n    add_wrongletter: 'add_wrongletter',\r\n\r\n    reset_game: 'reset_game'\r\n}","import React, { useContext } from 'react'\r\nimport { Button, Form, Row } from 'react-bootstrap'\r\nimport { useForm } from '../../hooks/useForm'\r\nimport { Context } from '../../reducer/Context'\r\nimport { types } from '../../reducer/types'\r\n\r\nexport const MenuScreen = ({ history }) => {\r\n\r\n    const { game: { word }, dispatch } = useContext(Context);\r\n\r\n    const [formValues, handlInputChange] = useForm({\r\n        wordSet: word\r\n    });\r\n\r\n    const { wordSet } = formValues;\r\n\r\n    const handleStart = (e) => {\r\n        e.preventDefault();\r\n        \r\n        dispatch({\r\n            type: types.set_word,\r\n            payload: {\r\n                word: wordSet,\r\n                rightLetters: [...wordSet.toLowerCase().split('')],\r\n            }\r\n        })\r\n\r\n        history.replace('play');\r\n    }\r\n\r\n    return (\r\n        <Row className=\"justify-content-center animate__animated animate__backInUp\">\r\n            <div className=\"col-6 bg-success p-3\">\r\n                <h1 className=\"text-white\">Menu</h1>\r\n\r\n                <Form onSubmit={handleStart}>\r\n                    <Form.Group\r\n                        className=\"mt-3\"\r\n                    >\r\n                        <Form.Label\r\n                            className=\"text-white\"\r\n                        >\r\n                            Enter a word\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            name=\"wordSet\"\r\n                            value={wordSet}\r\n                            autoComplete=\"off\"\r\n                            onChange={handlInputChange}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Button\r\n                        className=\"mt-3\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Star game\r\n                    </Button>\r\n                </Form>\r\n            </div>\r\n        </Row>\r\n    )\r\n}\r\n","export const draw = (ctx, count) => {\r\n    const drawHead = () => {\r\n        ctx.strokeStyle = '#000000';\r\n        ctx.beginPath();\r\n        ctx.arc(350, 120, 40, 0, 2 * Math.PI);\r\n        ctx.stroke();\r\n    }\r\n\r\n    const drawBody = () => {\r\n        drawLine(350, 160, 350, 300);\r\n    }\r\n\r\n    const drawLeftLeg = () => {\r\n        drawLine(350, 300, 300, 370);\r\n    }\r\n\r\n    const drawRightLeg = () => {\r\n        drawLine(350, 300, 400, 370);\r\n    }\r\n\r\n    const drawLeftArm = () => {\r\n        drawLine(350, 230, 400, 200);\r\n    }\r\n\r\n    const drawRightArm = () => {\r\n        drawLine(350, 230, 300, 200);\r\n    }\r\n\r\n    const drawLine = (x1, y1, x2, y2) => {\r\n        ctx.beginPath();\r\n        ctx.moveTo(x1, y1);\r\n        ctx.lineTo(x2, y2);\r\n        ctx.stroke();\r\n    }\r\n\r\n    const drawGallow = () => {\r\n        ctx.strokeStyle = '#000000';\r\n        ctx.lineWidth = 8;\r\n\r\n        drawLine(20, 400, 200, 400);\r\n        drawLine(100, 400, 100, 50);\r\n        drawLine(100, 50, 350, 50);\r\n    }\r\n\r\n    const drawRope = () => {\r\n        ctx.strokeStyle = '#FFC433';\r\n        drawLine(350, 50, 350, 80);\r\n    }\r\n\r\n    switch (count) {\r\n        case 0:\r\n            drawGallow()\r\n            break;\r\n        case 1:\r\n            drawRope();\r\n            break;\r\n        case 2:\r\n            drawHead();\r\n            break;\r\n        case 3:\r\n            drawBody();\r\n            break;\r\n        case 4:\r\n            drawLeftLeg();\r\n            break;\r\n        case 5:\r\n            drawRightArm();\r\n            break;\r\n        case 6:\r\n            drawLeftArm();\r\n            break;\r\n        case 7:\r\n            drawRightLeg();\r\n            break;\r\n        default:\r\n            return;\r\n    }\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { Col } from 'react-bootstrap';\r\nimport { draw } from '../../drawing/draw';\r\nimport { useCanvas } from '../../hooks/useCanvas'\r\nimport { Context } from '../../reducer/Context';\r\n\r\nexport const DeathScreen = () => {\r\n    const { game: { wrongLetters } } = useContext(Context)\r\n\r\n    const canvasRef = useCanvas(draw, wrongLetters.length);\r\n\r\n    return (\r\n        <Col className=\"p-0\">\r\n            <canvas\r\n                width=\"600\"\r\n                height=\"450\"\r\n                ref={canvasRef}\r\n            />\r\n        </Col>\r\n    )\r\n}\r\n","import { useRef, useEffect } from 'react'\r\n\r\nexport const useCanvas = (draw,count) => {\r\n  \r\n  const canvasRef = useRef(null)\r\n  \r\n  useEffect(() => {\r\n    \r\n    const canvas = canvasRef.current\r\n    const context = canvas.getContext('2d')\r\n    \r\n    draw(context,count)\r\n    \r\n  }, [draw,count])\r\n  \r\n  return canvasRef\r\n}\r\n","import { useContext } from 'react'\r\nimport { Button, Form } from 'react-bootstrap'\r\nimport { useForm } from '../../hooks/useForm';\r\nimport { Context } from '../../reducer/Context';\r\nimport { types } from '../../reducer/types';\r\n\r\nexport const LetterForm = () => {\r\n\r\n    const { game: { rightLetters,wrongLetters }, dispatch } = useContext(Context)\r\n\r\n    const [formValues, handleInputChange, reset] = useForm({\r\n        letter: ''\r\n    });\r\n\r\n    const { letter } = formValues;\r\n\r\n    const handleConfirm = (e) => {\r\n        e.preventDefault()\r\n\r\n        if(rightLetters.find(e => e === letter.toLowerCase())){\r\n            dispatch({\r\n                type: types.add_rightletter,\r\n                payload: rightLetters.map(\r\n                    le => le === letter ? letter.toUpperCase() : le\r\n                )\r\n            })\r\n        }else{\r\n            dispatch({\r\n                type: types.add_wrongletter,\r\n                payload: [...wrongLetters,letter]\r\n            })\r\n        }\r\n\r\n        reset()\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={handleConfirm}>\r\n            <Form.Group>\r\n                <Form.Label>\r\n                    Enter a letter\r\n                </Form.Label>\r\n                <Form.Control\r\n                    type=\"text\"\r\n                    name=\"letter\"\r\n                    value={letter}\r\n                    onChange={handleInputChange}\r\n                    autoComplete=\"off\"\r\n                />\r\n\r\n                <Button\r\n                    className=\"mt-3\"\r\n                    variant=\"primary\"\r\n                    type=\"submit\"\r\n                >\r\n                    Confirm\r\n                </Button>\r\n            </Form.Group>\r\n        </Form>\r\n    )\r\n}\r\n","import { Col } from 'react-bootstrap'\r\n\r\nexport const LetterScreen = ({ letter }) => {\r\n    return (\r\n        <Col \r\n            sm={1}\r\n            className=\"animate__animated animate__bounce\"\r\n        >\r\n            <Col>\r\n                <p className={'text-dark text-center letter-bold'}>\r\n                    {\r\n                        letter === letter.toUpperCase() ? letter : '__'\r\n                    }\r\n                </p>\r\n            </Col>\r\n        </Col>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { Button, Row } from 'react-bootstrap'\r\nimport { useHistory } from 'react-router';\r\nimport { Context } from '../../reducer/Context';\r\nimport { types } from '../../reducer/types';\r\n\r\nexport const ResetButton = ({ hasWon }) => {\r\n    const { dispatch } = useContext(Context)\r\n\r\n    const history = useHistory();\r\n\r\n    const handleRestart = () => {\r\n        dispatch({\r\n            type: types.reset_game\r\n        })\r\n\r\n        history.replace('/')\r\n    }\r\n\r\n    return (\r\n        <Row className=\"justify-content-center\">\r\n            {\r\n                !hasWon\r\n                    ? (\r\n                        <Button\r\n                            variant={'warning'}\r\n                            onClick={handleRestart}\r\n                            className=\"col-7 animate__animated animate__rubberBand\"\r\n                        >\r\n                            Sorry, try again!\r\n                        </Button>\r\n                    )\r\n                    : (\r\n                        <Button\r\n                            variant='success'\r\n                            onClick={handleRestart}\r\n                            className=\"col-7 animate__animated animate__rubberBand\"\r\n                        >\r\n                            Congratulations! Keep it up!\r\n                        </Button>\r\n                    )\r\n            }\r\n        </Row>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { Alert } from 'react-bootstrap'\r\nimport { Context } from '../../reducer/Context'\r\n\r\nexport const WrongLetters = () => {\r\n    const { game:{ wrongLetters } } = useContext(Context)\r\n\r\n    return (\r\n        <Alert\r\n            className=\"my-5 animate__animated animate__bounce text-center\"\r\n            variant={'danger'}\r\n        >\r\n            {wrongLetters}\r\n        </Alert>\r\n    )\r\n}\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { Col, Row } from \"react-bootstrap\"\r\nimport { Context } from '../../reducer/Context'\r\nimport { LetterForm } from \"./LetterForm\";\r\nimport { LetterScreen } from \"./LetterScreen\";\r\nimport { ResetButton } from \"./ResetButton\";\r\nimport { WrongLetters } from \"./WrongLetters\";\r\n\r\nexport const InputScreen = () => {\r\n    const { game: { wrongLetters, rightLetters } } = useContext(Context)\r\n\r\n    const [hasFinished, setHasFinished] = useState(false)\r\n    const [hasWon, setHasWon] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const rl = rightLetters.filter(le => le.match(/[A-Za-z]/))\r\n        const wl = wrongLetters.filter(le => le.match(/[A-Za-z]/))\r\n\r\n        if (!rl.find( le => (le === le.toLowerCase() ) )) {\r\n            alert('You won! :D')\r\n            setHasWon(true)\r\n            setHasFinished(true)\r\n        } else if (wl.length === 7) {\r\n            alert('You lose! :(')\r\n            setHasFinished(true)\r\n        }\r\n    }, [rightLetters, wrongLetters])\r\n\r\n    return (\r\n        <Col className=\"p-3\">\r\n\r\n            <Row className=\"justify-content-center my-4\">\r\n                {\r\n                    rightLetters.map((le, i) => (\r\n                        <LetterScreen\r\n                            key={`${le}-${i}`}\r\n                            letter={le}\r\n                        />\r\n                    ))\r\n                }\r\n            </Row>\r\n\r\n            {\r\n                hasFinished\r\n                    ? (\r\n                        <ResetButton\r\n                            hasWon={hasWon}\r\n                        />\r\n                    )\r\n                    : (\r\n                        <>\r\n                            <LetterForm />\r\n                            <WrongLetters />\r\n                        </>\r\n                    )\r\n            }\r\n\r\n\r\n        </Col>\r\n    )\r\n}\r\n","import { Row } from 'react-bootstrap';\r\nimport { DeathScreen } from './DeathScreen'\r\nimport { InputScreen } from './InputScreen'\r\n\r\nexport const PlayScreen = () => {\r\n\r\n    return (\r\n        <Row className=\"justify-content-between px-5\">\r\n            <DeathScreen />\r\n\r\n            <InputScreen />\r\n        </Row>\r\n    )\r\n}\r\n","import { Link } from 'react-router-dom'\r\n\r\nexport const Navbar = () => {\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\r\n\r\n            <Link\r\n                className=\"navbar-brand mx-3\"\r\n                to=\"/\"\r\n            >\r\n                The hangman, give it a hang\r\n            </Link>\r\n\r\n            <div className=\"navbar-collapse\">\r\n                <div className=\"navbar-nav\">\r\n\r\n                   \r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"navbar-collapse collapse w-100 order-3 dual-collapse2\">\r\n                <ul className=\"navbar-nav ml-auto\">\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import { Row } from \"react-bootstrap\";\r\nimport {\r\n    HashRouter,\r\n    Switch,\r\n    Route,\r\n    Redirect\r\n} from \"react-router-dom\";\r\nimport { MenuScreen } from \"../components/menu/MenuScreen\";\r\nimport { PlayScreen } from \"../components/play/PlayScreen\";\r\nimport { Navbar } from \"../components/ui/Navbar\"\r\n\r\nexport const AppRouter = () => {\r\n    return (\r\n        <HashRouter>\r\n            <Navbar />\r\n\r\n            <Row className=\"justify-content-center my-3 mx-0\">\r\n                <div>\r\n                    <Switch>\r\n                        <Route\r\n                            exact\r\n                            path=\"/\"\r\n                            component={MenuScreen}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path=\"/play\"\r\n                            component={PlayScreen}\r\n                        />\r\n\r\n                        <Redirect to=\"/\" />\r\n                    </Switch>\r\n                </div>\r\n            </Row>\r\n        </HashRouter>\r\n    )\r\n}","import { types } from \"./types\"\r\n\r\nexport const reducer = (state = {}, action) => {\r\n\r\n    switch (action.type) {\r\n        case types.set_word:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n\r\n        case types.count_error:\r\n            return {\r\n                ...state,\r\n                count: state.count + 1\r\n            }\r\n\r\n        case types.add_rightletter:\r\n            return {\r\n                ...state,\r\n                rightLetters: action.payload\r\n            }\r\n\r\n        case types.add_wrongletter:\r\n            return {\r\n                ...state,\r\n                wrongLetters: action.payload\r\n            }\r\n\r\n        case types.reset_game:\r\n            return {\r\n                ...state,\r\n                rightLetters: [],\r\n                wrongLetters: [],\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","import { AppRouter } from \"./routers/AppRouter\"\r\nimport { Context } from './reducer/Context'\r\nimport { useEffect, useReducer } from \"react\"\r\nimport { reducer } from \"./reducer/reducer\"\r\n\r\nconst init = () => {\r\n    return {\r\n        word: 'Taco',\r\n        count: 0,\r\n        rightLetters: [],\r\n        wrongLetters: [],\r\n    }\r\n}\r\n\r\nexport const HangmanApp = () => {\r\n\r\n    const [game, dispatch] = useReducer(reducer, {}, init);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('game', JSON.stringify(game))\r\n    }, [game])\r\n\r\n    return (\r\n        <Context.Provider value={{ game, dispatch }}>\r\n            <AppRouter />\r\n        </Context.Provider>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"animate.css\"\nimport './index.css'\nimport { HangmanApp } from './HangmanApp';\n\n\nReactDOM.render(\n  <HangmanApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}